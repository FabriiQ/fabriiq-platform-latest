'use client';

import { TrueFalseActivity, TrueFalseQuestion } from '../models/true-false';
import { generateId } from '../models/base';

/**
 * Convert AI-generated content to a True/False activity
 * 
 * This function handles various formats of AI-generated content and
 * converts them to our standardized activity format.
 * 
 * @param aiContent The AI-generated content
 * @returns A properly formatted TrueFalseActivity
 */
export function convertAIContentToTrueFalseActivity(aiContent: any): TrueFalseActivity {
  console.log('Converting AI content to true/false activity:', aiContent);
  
  // Extract questions from AI content (handle different possible structures)
  const questions = aiContent.questions || 
                   aiContent.content?.questions || 
                   aiContent.config?.questions || 
                   [];
  
  // Convert to our standardized format
  return {
    id: aiContent.id || generateId(),
    title: aiContent.title || 'AI Generated True/False Quiz',
    description: aiContent.description || 'This true/false quiz was generated by AI',
    instructions: aiContent.instructions || 'Read each statement carefully and determine if it is true or false.',
    activityType: 'true-false',
    
    // Convert questions with explanations and hints
    questions: questions.map((q: any) => ({
      id: q.id || generateId(),
      text: q.text || q.statement || q.question || '',
      isTrue: q.isTrue !== undefined ? q.isTrue : q.correct === 'true' || q.answer === true,
      explanation: q.explanation || q.reasoning || '',
      hint: q.hint || '',
      points: q.points || 1
    })),
    
    // Settings
    settings: {
      shuffleQuestions: aiContent.shuffleQuestions || false,
      showFeedbackImmediately: aiContent.showFeedbackImmediately || true,
      showCorrectAnswers: aiContent.showCorrectAnswers || true,
      passingPercentage: aiContent.passingPercentage || 60,
      attemptsAllowed: aiContent.attemptsAllowed || 1
    },
    
    // Metadata for AI-generated content
    metadata: {
      aiGenerated: true,
      generationPrompt: aiContent.prompt || '',
      difficulty: aiContent.difficulty || 'medium',
      estimatedTime: aiContent.estimatedTime || 10,
      keywords: aiContent.keywords || [],
      learningObjectives: aiContent.learningObjectives || []
    },
    
    createdAt: new Date(),
    updatedAt: new Date()
  };
}

/**
 * Enhance an existing activity with AI-generated content
 * 
 * This function takes an existing activity and enhances it with
 * AI-generated content, such as explanations, hints, and feedback.
 * 
 * @param activity The existing activity
 * @param aiContent The AI-generated enhancements
 * @returns The enhanced activity
 */
export function enhanceTrueFalseActivityWithAI(
  activity: TrueFalseActivity, 
  aiContent: any
): TrueFalseActivity {
  // Create a deep copy of the activity
  const enhancedActivity = JSON.parse(JSON.stringify(activity)) as TrueFalseActivity;
  
  // Enhance activity-level properties if they don't exist
  if (!enhancedActivity.description && aiContent.description) {
    enhancedActivity.description = aiContent.description;
  }
  
  if (!enhancedActivity.instructions && aiContent.instructions) {
    enhancedActivity.instructions = aiContent.instructions;
  }
  
  // Enhance questions
  if (aiContent.questions && Array.isArray(aiContent.questions)) {
    // Match questions by index or ID if possible
    enhancedActivity.questions.forEach((question, index) => {
      const aiQuestion = aiContent.questions[index];
      if (!aiQuestion) return;
      
      // Add explanation if it doesn't exist
      if (!question.explanation && aiQuestion.explanation) {
        question.explanation = aiQuestion.explanation;
      }
      
      // Add hint if it doesn't exist
      if (!question.hint && aiQuestion.hint) {
        question.hint = aiQuestion.hint;
      }
    });
  }
  
  // Update metadata
  enhancedActivity.metadata = {
    ...enhancedActivity.metadata,
    aiGenerated: true,
    updatedByAI: true,
    lastAIUpdateTime: new Date().toISOString()
  };
  
  // Update timestamp
  enhancedActivity.updatedAt = new Date();
  
  return enhancedActivity;
}

/**
 * Generate AI prompts for activity enhancement
 * 
 * This function generates prompts that can be sent to AI services
 * to enhance different aspects of an activity.
 * 
 * @param activity The activity to enhance
 * @param aspect The aspect to enhance (explanations, hints)
 * @returns A prompt for the AI service
 */
export function generateTrueFalseEnhancementPrompt(
  activity: TrueFalseActivity,
  aspect: 'explanations' | 'hints'
): string {
  const title = activity.title;
  const description = activity.description || '';
  
  let prompt = '';
  
  switch (aspect) {
    case 'explanations':
      prompt = `Please generate detailed explanations for the following true/false statements about "${title}". ${description}\n\n`;
      activity.questions.forEach((q, i) => {
        prompt += `Statement ${i+1}: ${q.text}\n`;
        prompt += `Correct answer: ${q.isTrue ? 'True' : 'False'}\n`;
        prompt += `Please provide a detailed explanation for why this statement is ${q.isTrue ? 'true' : 'false'}.\n\n`;
      });
      break;
      
    case 'hints':
      prompt = `Please generate helpful hints for the following true/false statements about "${title}". ${description}\n\n`;
      activity.questions.forEach((q, i) => {
        prompt += `Statement ${i+1}: ${q.text}\n`;
        prompt += `Please provide a hint that guides the student without giving away the answer.\n\n`;
      });
      break;
  }
  
  return prompt;
}
