'use client';

import { 
  SequenceActivity, 
  SequenceQuestion, 
  SequenceItem,
  createSequenceItem
} from '../models/sequence';
import { generateId } from '../models/base';

/**
 * Convert AI-generated content to a Sequence activity
 * 
 * This function handles various formats of AI-generated content and
 * converts them to our standardized activity format.
 * 
 * @param aiContent The AI-generated content
 * @returns A properly formatted SequenceActivity
 */
export function convertAIContentToSequenceActivity(aiContent: any): SequenceActivity {
  console.log('Converting AI content to sequence activity:', aiContent);
  
  // Extract questions from AI content (handle different possible structures)
  const questions = aiContent.questions || 
                   aiContent.content?.questions || 
                   aiContent.config?.questions || 
                   [];
  
  // Convert to our standardized format
  return {
    id: aiContent.id || generateId(),
    title: aiContent.title || 'AI Generated Sequence Activity',
    description: aiContent.description || 'This sequence activity was generated by AI',
    instructions: aiContent.instructions || 'Arrange the items in the correct order by dragging and dropping them.',
    activityType: 'sequence',
    
    // Convert questions with explanations and hints
    questions: questions.map((q: any) => {
      // Handle different possible formats for items
      let items: SequenceItem[] = [];
      
      // If the AI provided items in a structured format
      if (q.items && Array.isArray(q.items)) {
        items = q.items.map((item: any, index: number) => {
          // Handle different item formats
          if (typeof item === 'string') {
            // Simple string format
            return createSequenceItem(item, index);
          } else {
            // Object format
            return {
              id: item.id || generateId(),
              text: item.text || '',
              correctPosition: item.correctPosition !== undefined ? item.correctPosition : index,
              feedback: item.feedback || '',
              media: item.media || undefined
            };
          }
        });
      } 
      // If the AI provided a sequence as an array of strings
      else if (q.sequence && Array.isArray(q.sequence)) {
        items = q.sequence.map((text: string, index: number) => 
          createSequenceItem(text, index)
        );
      }
      // If the AI provided steps as an array of strings
      else if (q.steps && Array.isArray(q.steps)) {
        items = q.steps.map((text: string, index: number) => 
          createSequenceItem(text, index)
        );
      }
      // If the AI provided events as an array of strings
      else if (q.events && Array.isArray(q.events)) {
        items = q.events.map((text: string, index: number) => 
          createSequenceItem(text, index)
        );
      }
      
      return {
        id: q.id || generateId(),
        text: q.text || q.question || 'Arrange the following items in the correct order',
        items: items,
        explanation: q.explanation || q.reasoning || '',
        hint: q.hint || '',
        points: q.points || items.length,
        partialCredit: q.partialCredit !== undefined ? q.partialCredit : true
      };
    }),
    
    // Settings
    settings: {
      shuffleQuestions: aiContent.shuffleQuestions || false,
      shuffleItems: aiContent.shuffleItems !== undefined ? aiContent.shuffleItems : true,
      showFeedbackImmediately: aiContent.showFeedbackImmediately || true,
      showCorrectAnswers: aiContent.showCorrectAnswers || true,
      passingPercentage: aiContent.passingPercentage || 60,
      attemptsAllowed: aiContent.attemptsAllowed || 1,
      allowPartialCredit: aiContent.allowPartialCredit !== undefined ? aiContent.allowPartialCredit : true
    },
    
    // Metadata for AI-generated content
    metadata: {
      aiGenerated: true,
      generationPrompt: aiContent.prompt || '',
      difficulty: aiContent.difficulty || 'medium',
      estimatedTime: aiContent.estimatedTime || 10,
      keywords: aiContent.keywords || [],
      learningObjectives: aiContent.learningObjectives || []
    },
    
    createdAt: new Date(),
    updatedAt: new Date()
  };
}

/**
 * Enhance an existing activity with AI-generated content
 * 
 * This function takes an existing activity and enhances it with
 * AI-generated content, such as explanations, hints, and feedback.
 * 
 * @param activity The existing activity
 * @param aiContent The AI-generated enhancements
 * @returns The enhanced activity
 */
export function enhanceSequenceActivityWithAI(
  activity: SequenceActivity, 
  aiContent: any
): SequenceActivity {
  // Create a deep copy of the activity
  const enhancedActivity = JSON.parse(JSON.stringify(activity)) as SequenceActivity;
  
  // Enhance activity-level properties if they don't exist
  if (!enhancedActivity.description && aiContent.description) {
    enhancedActivity.description = aiContent.description;
  }
  
  if (!enhancedActivity.instructions && aiContent.instructions) {
    enhancedActivity.instructions = aiContent.instructions;
  }
  
  // Enhance questions
  if (aiContent.questions && Array.isArray(aiContent.questions)) {
    // Match questions by index or ID if possible
    enhancedActivity.questions.forEach((question, index) => {
      const aiQuestion = aiContent.questions[index];
      if (!aiQuestion) return;
      
      // Add explanation if it doesn't exist
      if (!question.explanation && aiQuestion.explanation) {
        question.explanation = aiQuestion.explanation;
      }
      
      // Add hint if it doesn't exist
      if (!question.hint && aiQuestion.hint) {
        question.hint = aiQuestion.hint;
      }
      
      // Enhance items with feedback
      if (aiQuestion.items && Array.isArray(aiQuestion.items)) {
        question.items.forEach((item, itemIndex) => {
          const aiItem = aiQuestion.items[itemIndex];
          if (!aiItem) return;
          
          // Add feedback if it doesn't exist
          if (!item.feedback && aiItem.feedback) {
            item.feedback = aiItem.feedback;
          }
        });
      }
    });
  }
  
  // Update metadata
  enhancedActivity.metadata = {
    ...enhancedActivity.metadata,
    aiGenerated: true,
    updatedByAI: true,
    lastAIUpdateTime: new Date().toISOString()
  };
  
  // Update timestamp
  enhancedActivity.updatedAt = new Date();
  
  return enhancedActivity;
}

/**
 * Generate AI prompts for activity enhancement
 * 
 * This function generates prompts that can be sent to AI services
 * to enhance different aspects of an activity.
 * 
 * @param activity The activity to enhance
 * @param aspect The aspect to enhance (explanations, hints, feedback)
 * @returns A prompt for the AI service
 */
export function generateSequenceEnhancementPrompt(
  activity: SequenceActivity,
  aspect: 'explanations' | 'hints' | 'feedback'
): string {
  const title = activity.title;
  const description = activity.description || '';
  
  let prompt = '';
  
  switch (aspect) {
    case 'explanations':
      prompt = `Please generate detailed explanations for the following sequence questions about "${title}". ${description}\n\n`;
      activity.questions.forEach((q, i) => {
        prompt += `Question ${i+1}: ${q.text}\n`;
        prompt += 'Correct sequence:\n';
        
        // Sort items by correct position
        const sortedItems = [...q.items].sort((a, b) => a.correctPosition - b.correctPosition);
        sortedItems.forEach((item, j) => {
          prompt += `${j+1}. ${item.text}\n`;
        });
        
        prompt += `Please provide a detailed explanation for why this is the correct sequence.\n\n`;
      });
      break;
      
    case 'hints':
      prompt = `Please generate helpful hints for the following sequence questions about "${title}". ${description}\n\n`;
      activity.questions.forEach((q, i) => {
        prompt += `Question ${i+1}: ${q.text}\n`;
        prompt += 'Items to arrange:\n';
        q.items.forEach((item, j) => {
          prompt += `- ${item.text}\n`;
        });
        prompt += `Please provide a hint that guides the student without giving away the correct sequence.\n\n`;
      });
      break;
      
    case 'feedback':
      prompt = `Please generate specific feedback for each item in the following sequence questions about "${title}". ${description}\n\n`;
      activity.questions.forEach((q, i) => {
        prompt += `Question ${i+1}: ${q.text}\n`;
        
        // Sort items by correct position
        const sortedItems = [...q.items].sort((a, b) => a.correctPosition - b.correctPosition);
        sortedItems.forEach((item, j) => {
          prompt += `Item ${j+1}: ${item.text}\n`;
          prompt += `Please provide specific feedback explaining why this item belongs in position ${j+1}.\n`;
        });
        prompt += '\n';
      });
      break;
  }
  
  return prompt;
}
