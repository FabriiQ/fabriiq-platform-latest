'use client';

import { MultipleChoiceActivity, MultipleChoiceQuestion, MultipleChoiceOption } from '../models/multiple-choice';
import { generateId } from '../models/base';

/**
 * Convert AI-generated content to a Multiple Choice activity
 * 
 * This function handles various formats of AI-generated content and
 * converts them to our standardized activity format.
 * 
 * @param aiContent The AI-generated content
 * @returns A properly formatted MultipleChoiceActivity
 */
export function convertAIContentToActivity(aiContent: any): MultipleChoiceActivity {
  console.log('Converting AI content to activity:', aiContent);
  
  // Extract questions from AI content (handle different possible structures)
  const questions = aiContent.questions || 
                   aiContent.content?.questions || 
                   aiContent.config?.questions || 
                   [];
  
  // Convert to our standardized format
  return {
    id: aiContent.id || generateId(),
    title: aiContent.title || 'AI Generated Quiz',
    description: aiContent.description || 'This quiz was generated by AI',
    instructions: aiContent.instructions || 'Select the best answer for each question',
    activityType: 'multiple-choice',
    
    // Convert questions with explanations and hints
    questions: questions.map((q: any) => ({
      id: q.id || generateId(),
      text: q.text || q.question || '',
      explanation: q.explanation || q.reasoning || '',
      hint: q.hint || '',
      options: (q.options || []).map((o: any) => ({
        id: o.id || generateId(),
        text: o.text || '',
        isCorrect: o.isCorrect || false,
        feedback: o.feedback || ''
      }))
    })),
    
    // Settings
    settings: {
      shuffleQuestions: aiContent.shuffleQuestions || false,
      shuffleOptions: aiContent.shuffleOptions || true,
      showFeedbackImmediately: aiContent.showFeedbackImmediately || true,
      showCorrectAnswers: aiContent.showCorrectAnswers || true,
      passingPercentage: aiContent.passingPercentage || 60,
      attemptsAllowed: aiContent.attemptsAllowed || 1
    },
    
    // Metadata for AI-generated content
    metadata: {
      aiGenerated: true,
      generationPrompt: aiContent.prompt || '',
      difficulty: aiContent.difficulty || 'medium',
      estimatedTime: aiContent.estimatedTime || 10,
      keywords: aiContent.keywords || [],
      learningObjectives: aiContent.learningObjectives || []
    },
    
    createdAt: new Date(),
    updatedAt: new Date()
  };
}

/**
 * Enhance an existing activity with AI-generated content
 * 
 * This function takes an existing activity and enhances it with
 * AI-generated content, such as explanations, hints, and feedback.
 * 
 * @param activity The existing activity
 * @param aiContent The AI-generated enhancements
 * @returns The enhanced activity
 */
export function enhanceActivityWithAI(
  activity: MultipleChoiceActivity, 
  aiContent: any
): MultipleChoiceActivity {
  // Create a deep copy of the activity
  const enhancedActivity = JSON.parse(JSON.stringify(activity)) as MultipleChoiceActivity;
  
  // Enhance activity-level properties if they don't exist
  if (!enhancedActivity.description && aiContent.description) {
    enhancedActivity.description = aiContent.description;
  }
  
  if (!enhancedActivity.instructions && aiContent.instructions) {
    enhancedActivity.instructions = aiContent.instructions;
  }
  
  // Enhance questions
  if (aiContent.questions && Array.isArray(aiContent.questions)) {
    // Match questions by index or ID if possible
    enhancedActivity.questions.forEach((question, index) => {
      const aiQuestion = aiContent.questions[index];
      if (!aiQuestion) return;
      
      // Add explanation if it doesn't exist
      if (!question.explanation && aiQuestion.explanation) {
        question.explanation = aiQuestion.explanation;
      }
      
      // Add hint if it doesn't exist
      if (!question.hint && aiQuestion.hint) {
        question.hint = aiQuestion.hint;
      }
      
      // Enhance options with feedback
      question.options.forEach((option, optIndex) => {
        const aiOption = aiQuestion.options?.[optIndex];
        if (!aiOption) return;
        
        // Add feedback if it doesn't exist
        if (!option.feedback && aiOption.feedback) {
          option.feedback = aiOption.feedback;
        }
      });
    });
  }
  
  // Update metadata
  enhancedActivity.metadata = {
    ...enhancedActivity.metadata,
    aiGenerated: true,
    updatedByAI: true,
    lastAIUpdateTime: new Date().toISOString()
  };
  
  // Update timestamp
  enhancedActivity.updatedAt = new Date();
  
  return enhancedActivity;
}

/**
 * Generate AI prompts for activity enhancement
 * 
 * This function generates prompts that can be sent to AI services
 * to enhance different aspects of an activity.
 * 
 * @param activity The activity to enhance
 * @param aspect The aspect to enhance (explanations, hints, feedback)
 * @returns A prompt for the AI service
 */
export function generateEnhancementPrompt(
  activity: MultipleChoiceActivity,
  aspect: 'explanations' | 'hints' | 'feedback'
): string {
  const title = activity.title;
  const description = activity.description || '';
  
  let prompt = '';
  
  switch (aspect) {
    case 'explanations':
      prompt = `Please generate detailed explanations for the following multiple choice questions about "${title}". ${description}\n\n`;
      activity.questions.forEach((q, i) => {
        prompt += `Question ${i+1}: ${q.text}\n`;
        prompt += `Correct answer: ${q.options.find(o => o.isCorrect)?.text || 'Unknown'}\n`;
        prompt += `Please provide a detailed explanation for why this answer is correct.\n\n`;
      });
      break;
      
    case 'hints':
      prompt = `Please generate helpful hints for the following multiple choice questions about "${title}". ${description}\n\n`;
      activity.questions.forEach((q, i) => {
        prompt += `Question ${i+1}: ${q.text}\n`;
        prompt += `Please provide a hint that guides the student without giving away the answer.\n\n`;
      });
      break;
      
    case 'feedback':
      prompt = `Please generate specific feedback for each option in the following multiple choice questions about "${title}". ${description}\n\n`;
      activity.questions.forEach((q, i) => {
        prompt += `Question ${i+1}: ${q.text}\n`;
        q.options.forEach((o, j) => {
          prompt += `Option ${j+1}: ${o.text} (${o.isCorrect ? 'Correct' : 'Incorrect'})\n`;
          prompt += `Please provide specific feedback for this option explaining why it is ${o.isCorrect ? 'correct' : 'incorrect'}.\n`;
        });
        prompt += '\n';
      });
      break;
  }
  
  return prompt;
}
