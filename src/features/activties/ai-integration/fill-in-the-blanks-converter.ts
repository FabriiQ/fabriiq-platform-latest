'use client';

import { 
  FillInTheBlanksActivity, 
  FillInTheBlanksQuestion, 
  FillInTheBlanksBlank,
  createDefaultFillInTheBlanksQuestion
} from '../models/fill-in-the-blanks';
import { generateId } from '../models/base';

/**
 * Convert AI-generated content to a Fill in the Blanks activity
 * 
 * This function handles various formats of AI-generated content and
 * converts them to our standardized activity format.
 * 
 * @param aiContent The AI-generated content
 * @returns A properly formatted FillInTheBlanksActivity
 */
export function convertAIContentToFillInTheBlanksActivity(aiContent: any): FillInTheBlanksActivity {
  console.log('Converting AI content to fill in the blanks activity:', aiContent);
  
  // Extract questions from AI content (handle different possible structures)
  const questions = aiContent.questions || 
                   aiContent.content?.questions || 
                   aiContent.config?.questions || 
                   [];
  
  // Convert to our standardized format
  return {
    id: aiContent.id || generateId(),
    title: aiContent.title || 'AI Generated Fill in the Blanks Activity',
    description: aiContent.description || 'This fill in the blanks activity was generated by AI',
    instructions: aiContent.instructions || 'Read each sentence carefully and fill in the blanks with the correct words.',
    activityType: 'fill-in-the-blanks',
    
    // Convert questions with explanations and hints
    questions: questions.map((q: any) => {
      // Handle different possible formats for blanks
      let questionText = q.text || q.sentence || '';
      let blanks: FillInTheBlanksBlank[] = [];
      
      // If the AI provided blanks in a structured format
      if (q.blanks && Array.isArray(q.blanks)) {
        blanks = q.blanks.map((b: any) => ({
          id: b.id || generateId(),
          correctAnswers: Array.isArray(b.correctAnswers) ? b.correctAnswers : [b.correctAnswer || b.answer || ''],
          caseSensitive: b.caseSensitive || false,
          feedback: b.feedback || '',
          size: b.size || undefined
        }));
        
        // Make sure the blanks are referenced in the text
        blanks.forEach(blank => {
          if (!questionText.includes(`{{${blank.id}}}`)) {
            // If the blank ID is not in the text, add it at the end
            questionText += ` {{${blank.id}}}`;
          }
        });
      } 
      // If the AI provided a text with placeholders like [blank]
      else if (questionText.includes('[') && questionText.includes(']')) {
        // Extract blanks from text like "The capital of France is [Paris]"
        const regex = /\[([^\]]+)\]/g;
        let match;
        let blankIndex = 0;
        
        // Create a new text with our blank format
        let newText = questionText;
        
        while ((match = regex.exec(questionText)) !== null) {
          const answer = match[1];
          const blankId = generateId();
          
          // Replace [answer] with {{blankId}}
          newText = newText.replace(match[0], `{{${blankId}}}`);
          
          // Add the blank
          blanks.push({
            id: blankId,
            correctAnswers: [answer],
            caseSensitive: false,
            feedback: ''
          });
          
          blankIndex++;
        }
        
        questionText = newText;
      }
      // If no blanks were provided, create a default question
      else if (blanks.length === 0) {
        const defaultQuestion = createDefaultFillInTheBlanksQuestion();
        questionText = defaultQuestion.text;
        blanks = defaultQuestion.blanks;
      }
      
      return {
        id: q.id || generateId(),
        text: questionText,
        blanks: blanks,
        explanation: q.explanation || q.reasoning || '',
        hint: q.hint || '',
        points: q.points || blanks.length,
        partialCredit: q.partialCredit !== undefined ? q.partialCredit : true
      };
    }),
    
    // Settings
    settings: {
      shuffleQuestions: aiContent.shuffleQuestions || false,
      showFeedbackImmediately: aiContent.showFeedbackImmediately || true,
      showCorrectAnswers: aiContent.showCorrectAnswers || true,
      passingPercentage: aiContent.passingPercentage || 60,
      attemptsAllowed: aiContent.attemptsAllowed || 1,
      allowPartialCredit: aiContent.allowPartialCredit !== undefined ? aiContent.allowPartialCredit : true,
      caseSensitiveByDefault: aiContent.caseSensitiveByDefault || false
    },
    
    // Metadata for AI-generated content
    metadata: {
      aiGenerated: true,
      generationPrompt: aiContent.prompt || '',
      difficulty: aiContent.difficulty || 'medium',
      estimatedTime: aiContent.estimatedTime || 10,
      keywords: aiContent.keywords || [],
      learningObjectives: aiContent.learningObjectives || []
    },
    
    createdAt: new Date(),
    updatedAt: new Date()
  };
}

/**
 * Enhance an existing activity with AI-generated content
 * 
 * This function takes an existing activity and enhances it with
 * AI-generated content, such as explanations, hints, and feedback.
 * 
 * @param activity The existing activity
 * @param aiContent The AI-generated enhancements
 * @returns The enhanced activity
 */
export function enhanceFillInTheBlanksActivityWithAI(
  activity: FillInTheBlanksActivity, 
  aiContent: any
): FillInTheBlanksActivity {
  // Create a deep copy of the activity
  const enhancedActivity = JSON.parse(JSON.stringify(activity)) as FillInTheBlanksActivity;
  
  // Enhance activity-level properties if they don't exist
  if (!enhancedActivity.description && aiContent.description) {
    enhancedActivity.description = aiContent.description;
  }
  
  if (!enhancedActivity.instructions && aiContent.instructions) {
    enhancedActivity.instructions = aiContent.instructions;
  }
  
  // Enhance questions
  if (aiContent.questions && Array.isArray(aiContent.questions)) {
    // Match questions by index or ID if possible
    enhancedActivity.questions.forEach((question, index) => {
      const aiQuestion = aiContent.questions[index];
      if (!aiQuestion) return;
      
      // Add explanation if it doesn't exist
      if (!question.explanation && aiQuestion.explanation) {
        question.explanation = aiQuestion.explanation;
      }
      
      // Add hint if it doesn't exist
      if (!question.hint && aiQuestion.hint) {
        question.hint = aiQuestion.hint;
      }
      
      // Enhance blanks with feedback
      if (aiQuestion.blanks && Array.isArray(aiQuestion.blanks)) {
        question.blanks.forEach((blank, blankIndex) => {
          const aiBlank = aiQuestion.blanks[blankIndex];
          if (!aiBlank) return;
          
          // Add feedback if it doesn't exist
          if (!blank.feedback && aiBlank.feedback) {
            blank.feedback = aiBlank.feedback;
          }
          
          // Add alternative correct answers if provided
          if (aiBlank.correctAnswers && Array.isArray(aiBlank.correctAnswers)) {
            // Add any new correct answers that aren't already in the list
            aiBlank.correctAnswers.forEach((answer: string) => {
              if (!blank.correctAnswers.includes(answer)) {
                blank.correctAnswers.push(answer);
              }
            });
          }
        });
      }
    });
  }
  
  // Update metadata
  enhancedActivity.metadata = {
    ...enhancedActivity.metadata,
    aiGenerated: true,
    updatedByAI: true,
    lastAIUpdateTime: new Date().toISOString()
  };
  
  // Update timestamp
  enhancedActivity.updatedAt = new Date();
  
  return enhancedActivity;
}

/**
 * Generate AI prompts for activity enhancement
 * 
 * This function generates prompts that can be sent to AI services
 * to enhance different aspects of an activity.
 * 
 * @param activity The activity to enhance
 * @param aspect The aspect to enhance (explanations, hints, feedback, alternatives)
 * @returns A prompt for the AI service
 */
export function generateFillInTheBlanksEnhancementPrompt(
  activity: FillInTheBlanksActivity,
  aspect: 'explanations' | 'hints' | 'feedback' | 'alternatives'
): string {
  const title = activity.title;
  const description = activity.description || '';
  
  let prompt = '';
  
  switch (aspect) {
    case 'explanations':
      prompt = `Please generate detailed explanations for the following fill in the blanks questions about "${title}". ${description}\n\n`;
      activity.questions.forEach((q, i) => {
        // Replace blank placeholders with their correct answers for clarity
        let questionText = q.text;
        q.blanks.forEach(blank => {
          questionText = questionText.replace(`{{${blank.id}}}`, `[${blank.correctAnswers[0]}]`);
        });
        
        prompt += `Question ${i+1}: ${questionText}\n`;
        prompt += `Please provide a detailed explanation for why these answers are correct.\n\n`;
      });
      break;
      
    case 'hints':
      prompt = `Please generate helpful hints for the following fill in the blanks questions about "${title}". ${description}\n\n`;
      activity.questions.forEach((q, i) => {
        // Replace blank placeholders with underscores for clarity
        let questionText = q.text;
        q.blanks.forEach((blank, j) => {
          questionText = questionText.replace(`{{${blank.id}}}`, `_____(${j+1})`);
        });
        
        prompt += `Question ${i+1}: ${questionText}\n`;
        prompt += `Please provide a hint that guides the student without giving away the answers.\n\n`;
      });
      break;
      
    case 'feedback':
      prompt = `Please generate specific feedback for each blank in the following fill in the blanks questions about "${title}". ${description}\n\n`;
      activity.questions.forEach((q, i) => {
        // Replace blank placeholders with their correct answers for clarity
        let questionText = q.text;
        q.blanks.forEach((blank, j) => {
          questionText = questionText.replace(`{{${blank.id}}}`, `[${blank.correctAnswers[0]}]`);
        });
        
        prompt += `Question ${i+1}: ${questionText}\n`;
        q.blanks.forEach((blank, j) => {
          prompt += `Blank ${j+1}: ${blank.correctAnswers[0]}\n`;
          prompt += `Please provide specific feedback for this blank explaining why this answer is correct.\n`;
        });
        prompt += '\n';
      });
      break;
      
    case 'alternatives':
      prompt = `Please generate alternative correct answers for each blank in the following fill in the blanks questions about "${title}". ${description}\n\n`;
      activity.questions.forEach((q, i) => {
        // Replace blank placeholders with their correct answers for clarity
        let questionText = q.text;
        q.blanks.forEach((blank, j) => {
          questionText = questionText.replace(`{{${blank.id}}}`, `[${blank.correctAnswers[0]}]`);
        });
        
        prompt += `Question ${i+1}: ${questionText}\n`;
        q.blanks.forEach((blank, j) => {
          prompt += `Blank ${j+1}: Current correct answer(s): ${blank.correctAnswers.join(', ')}\n`;
          prompt += `Please provide 2-3 alternative correct answers that could also be accepted.\n`;
        });
        prompt += '\n';
      });
      break;
  }
  
  return prompt;
}
