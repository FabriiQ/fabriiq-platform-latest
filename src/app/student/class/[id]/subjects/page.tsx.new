'use client';

import { useParams, useRouter } from 'next/navigation';
import { api } from '@/trpc/react';
import { AlertCircle, BookOpen, Clock, Calendar, BarChart, CheckCircle, ChevronRight } from 'lucide-react';
import { Alert, AlertTitle, AlertDescription } from '@/components/ui/alert';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import Link from 'next/link';
import { EducationalLoadingFact } from '@/components/ui/loading/EducationalLoadingFact';
import { LaborIllusionLoader } from '@/components/ui/loading/LaborIllusionLoader';
import { useState } from 'react';

// Custom refresh icon
const RefreshIcon = (props: React.SVGProps<SVGSVGElement>) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    strokeWidth="2"
    strokeLinecap="round"
    strokeLinejoin="round"
    {...props}
  >
    <path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8" />
    <path d="M21 3v5h-5" />
    <path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16" />
    <path d="M3 21v-5h5" />
  </svg>
);

/**
 * Subjects page for a class in the student portal
 * 
 * Shows all subjects for a class with their progress and activities
 */
export default function ClassSubjectsPage() {
  // Get route parameters and router
  const params = useParams();
  const router = useRouter();
  const classId = params?.id as string || "";
  
  // State for authentication errors
  const [authError, setAuthError] = useState<string | null>(null);

  // Get class details
  const {
    data: classData,
    isLoading: isClassLoading,
    error: classError,
    refetch: refetchClass
  } = api.student.getClassDetails.useQuery(
    { classId },
    {
      enabled: !!classId,
      retry: 1,
      onError: (error) => {
        console.error("Error fetching class details:", error);
        if (error.data?.code === 'UNAUTHORIZED') {
          setAuthError("Your session has expired. Please refresh the page or log in again.");
        }
      }
    }
  );

  // Get subjects for this class
  const {
    data: subjectsData,
    isLoading: isSubjectsLoading,
    error: subjectsError,
    refetch: refetchSubjects
  } = api.subject.list.useQuery(
    {
      courseId: classData?.courseId,
      take: 100
    },
    {
      enabled: !!classData?.courseId,
      retry: 1,
      onError: (error) => {
        console.error("Error fetching subjects:", error);
        if (error.data?.code === 'UNAUTHORIZED') {
          setAuthError("Your session has expired. Please refresh the page or log in again.");
        }
      }
    }
  );

  // Combined loading and error states
  const isLoading = isClassLoading || isSubjectsLoading;
  const error = classError || subjectsError;
  
  // Process subjects data
  const subjects = subjectsData?.items || [];

  // Function to refresh session
  const refreshSession = async () => {
    try {
      window.location.reload();
    } catch (error) {
      console.error("Error refreshing session:", error);
      router.push('/login?callbackUrl=' + encodeURIComponent(`/student/class/${classId}/subjects`));
    }
  };

  // Function to refresh all data
  const refreshData = () => {
    refetchClass();
    refetchSubjects();
  };

  // Show loading state
  if (isLoading) {
    return (
      <div className="container mx-auto p-6">
        <h1 className="text-3xl font-bold mb-4">Subjects</h1>
        <p className="text-muted-foreground mb-6">Loading your subjects...</p>
        <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow border">
          <h2 className="text-xl font-semibold mb-4">Loading Your Subjects</h2>
          <div className="animate-pulse flex space-x-4">
            <div className="flex-1 space-y-6 py-1">
              <div className="h-4 bg-slate-200 rounded"></div>
              <div className="space-y-3">
                <div className="grid grid-cols-3 gap-4">
                  <div className="h-4 bg-slate-200 rounded col-span-2"></div>
                  <div className="h-4 bg-slate-200 rounded col-span-1"></div>
                </div>
                <div className="h-4 bg-slate-200 rounded"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Show authentication error
  if (authError) {
    return (
      <div className="container mx-auto p-6">
        <Alert className="border-destructive/50 text-destructive mb-4">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Authentication Error</AlertTitle>
          <AlertDescription>
            {authError}
            <div className="mt-4 flex space-x-4">
              <Button
                onClick={refreshSession}
                className="flex items-center"
              >
                <RefreshIcon className="h-4 w-4 mr-2" />
                Refresh Session
              </Button>
              <Button
                variant="outline"
                onClick={() => router.push('/login?callbackUrl=' + encodeURIComponent(`/student/class/${classId}/subjects`))}
              >
                Log In Again
              </Button>
            </div>
          </AlertDescription>
        </Alert>
      </div>
    );
  }

  // Handle error state
  if (error || !classData) {
    return (
      <div className="container mx-auto p-6">
        <Alert className="border-destructive/50 text-destructive mb-4">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>
            {error ? error.message : "Failed to load subjects"}
          </AlertDescription>
        </Alert>
        <Button onClick={refreshData}>Try Again</Button>
      </div>
    );
  }

  // Handle empty subjects
  if (subjects.length === 0) {
    return (
      <div className="container mx-auto p-6">
        <h1 className="text-3xl font-bold mb-4">Subjects</h1>
        <h2 className="text-2xl font-bold mb-4">{classData?.className}</h2>
        <p className="text-muted-foreground mb-6">
          {classData?.courseName} {classData?.termName ? `• ${classData?.termName}` : ''}
        </p>
        
        <Card>
          <CardContent className="pt-6">
            <div className="text-center py-8">
              <BookOpen className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
              <h3 className="text-lg font-medium mb-2">No Subjects Available</h3>
              <p className="text-muted-foreground">
                There are no subjects available for this class yet.
              </p>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  // Main content with subjects
  return (
    <div className="container mx-auto p-6">
      <h1 className="text-3xl font-bold mb-4">Subjects</h1>
      <h2 className="text-2xl font-bold mb-4">{classData?.className}</h2>
      <p className="text-muted-foreground mb-6">
        {classData?.courseName} {classData?.termName ? `• ${classData?.termName}` : ''}
      </p>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {subjects.map((subject) => (
          <Card key={subject.id} className="overflow-hidden hover:shadow-md transition-all">
            <CardHeader>
              <CardTitle>{subject.name}</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground mb-4">
                {(() => {
                  if (!subject.syllabus) return `${subject.name} activities and resources`;

                  if (typeof subject.syllabus === 'string') {
                    return subject.syllabus.substring(0, 100);
                  } else if (typeof subject.syllabus === 'object') {
                    // If syllabus is an object, try to extract meaningful text
                    if (subject.syllabus.description) {
                      return subject.syllabus.description.substring(0, 100);
                    } else if (subject.syllabus.overview) {
                      return subject.syllabus.overview.substring(0, 100);
                    } else if (subject.syllabus.summary) {
                      return subject.syllabus.summary.substring(0, 100);
                    } else {
                      // If it's an object but no clear description field, create a readable summary
                      const keys = Object.keys(subject.syllabus);
                      if (keys.length > 0) {
                        return `Covers ${keys.join(', ').toLowerCase()} and related topics`;
                      }
                    }
                  }

                  return `${subject.name} activities and resources`;
                })()}
              </p>
            </CardContent>
            <CardFooter>
              <Button
                variant="outline"
                className="w-full"
                asChild
              >
                <Link href={`/student/class/${classId}/subjects/${subject.id}/activities`}>
                  View Activities
                </Link>
              </Button>
            </CardFooter>
          </Card>
        ))}
      </div>
    </div>
  );
}
